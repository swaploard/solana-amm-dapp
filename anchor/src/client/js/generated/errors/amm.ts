/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { AMM_PROGRAM_ADDRESS } from '../programs';

/** NoLiquidtyFound: No Liquidty Found */
export const AMM_ERROR__NO_LIQUIDTY_FOUND = 0x1770; // 6000
/** SlippageExceeded: Slippage exceeded */
export const AMM_ERROR__SLIPPAGE_EXCEEDED = 0x1771; // 6001

export type AmmError =
  | typeof AMM_ERROR__NO_LIQUIDTY_FOUND
  | typeof AMM_ERROR__SLIPPAGE_EXCEEDED;

let ammErrorMessages: Record<AmmError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ammErrorMessages = {
    [AMM_ERROR__NO_LIQUIDTY_FOUND]: `No Liquidty Found`,
    [AMM_ERROR__SLIPPAGE_EXCEEDED]: `Slippage exceeded`,
  };
}

export function getAmmErrorMessage(code: AmmError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ammErrorMessages as Record<AmmError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAmmError<TProgramErrorCode extends AmmError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    AMM_PROGRAM_ADDRESS,
    code
  );
}
