/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const POOL_DISCRIMINATOR = new Uint8Array([1]);

export function getPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(POOL_DISCRIMINATOR);
}

export type Pool = {
  discriminator: ReadonlyUint8Array;
  mintA: Address;
  mintB: Address;
  vaultA: Address;
  vaultB: Address;
  lpMint: Address;
  feeBps: number;
  protoFeeBps: number;
  admin: Address;
  bumpPool: number;
  bumpAuth: number;
};

export type PoolArgs = {
  mintA: Address;
  mintB: Address;
  vaultA: Address;
  vaultB: Address;
  lpMint: Address;
  feeBps: number;
  protoFeeBps: number;
  admin: Address;
  bumpPool: number;
  bumpAuth: number;
};

export function getPoolEncoder(): FixedSizeEncoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['mintA', getAddressEncoder()],
      ['mintB', getAddressEncoder()],
      ['vaultA', getAddressEncoder()],
      ['vaultB', getAddressEncoder()],
      ['lpMint', getAddressEncoder()],
      ['feeBps', getU16Encoder()],
      ['protoFeeBps', getU16Encoder()],
      ['admin', getAddressEncoder()],
      ['bumpPool', getU8Encoder()],
      ['bumpAuth', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: POOL_DISCRIMINATOR })
  );
}

export function getPoolDecoder(): FixedSizeDecoder<Pool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['mintA', getAddressDecoder()],
    ['mintB', getAddressDecoder()],
    ['vaultA', getAddressDecoder()],
    ['vaultB', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['feeBps', getU16Decoder()],
    ['protoFeeBps', getU16Decoder()],
    ['admin', getAddressDecoder()],
    ['bumpPool', getU8Decoder()],
    ['bumpAuth', getU8Decoder()],
  ]);
}

export function getPoolCodec(): FixedSizeCodec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder());
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder()
  );
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePool(maybeAccount);
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount));
}

export function getPoolSize(): number {
  return 199;
}
