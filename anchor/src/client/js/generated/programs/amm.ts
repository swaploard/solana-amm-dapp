/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedAddLiquidityInstruction,
  type ParsedInitializePoolInstruction,
  type ParsedRemoveLiquidityInstruction,
  type ParsedSwapTokenInstruction,
} from '../instructions';

export const AMM_PROGRAM_ADDRESS =
  'HFRstgCb2NeFoGPV5iuoQ6nbrfawKuh1qy9zzN2uBCyb' as Address<'HFRstgCb2NeFoGPV5iuoQ6nbrfawKuh1qy9zzN2uBCyb'>;

export enum AmmAccount {
  Pool,
}

export function identifyAmmAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])),
      0
    )
  ) {
    return AmmAccount.Pool;
  }
  throw new Error(
    'The provided account could not be identified as a amm account.'
  );
}

export enum AmmInstruction {
  AddLiquidity,
  InitializePool,
  RemoveLiquidity,
  SwapToken,
}

export function identifyAmmInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 157, 89, 67, 143, 182, 52, 72])
      ),
      0
    )
  ) {
    return AmmInstruction.AddLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 180, 10, 172, 84, 174, 232, 40])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 85, 209, 72, 24, 206, 177, 108])
      ),
      0
    )
  ) {
    return AmmInstruction.RemoveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 185, 52, 125, 128, 42, 84, 227])
      ),
      0
    )
  ) {
    return AmmInstruction.SwapToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a amm instruction.'
  );
}

export type ParsedAmmInstruction<
  TProgram extends string = 'HFRstgCb2NeFoGPV5iuoQ6nbrfawKuh1qy9zzN2uBCyb',
> =
  | ({
      instructionType: AmmInstruction.AddLiquidity;
    } & ParsedAddLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.InitializePool;
    } & ParsedInitializePoolInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.RemoveLiquidity;
    } & ParsedRemoveLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.SwapToken;
    } & ParsedSwapTokenInstruction<TProgram>);
