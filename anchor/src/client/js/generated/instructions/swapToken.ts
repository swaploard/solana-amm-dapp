/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SWAP_TOKEN_DISCRIMINATOR = new Uint8Array([
  129, 185, 52, 125, 128, 42, 84, 227,
]);

export function getSwapTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_TOKEN_DISCRIMINATOR);
}

export type SwapTokenInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountVaultA extends string | AccountMeta<string> = string,
  TAccountVaultB extends string | AccountMeta<string> = string,
  TAccountUserAtaA extends string | AccountMeta<string> = string,
  TAccountUserAtaB extends string | AccountMeta<string> = string,
  TAccountPoolAuth extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountUserAtaA extends string
        ? WritableAccount<TAccountUserAtaA>
        : TAccountUserAtaA,
      TAccountUserAtaB extends string
        ? WritableAccount<TAccountUserAtaB>
        : TAccountUserAtaB,
      TAccountPoolAuth extends string
        ? ReadonlyAccount<TAccountPoolAuth>
        : TAccountPoolAuth,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountIn: bigint;
  minimumOut: bigint;
};

export type SwapTokenInstructionDataArgs = {
  amountIn: number | bigint;
  minimumOut: number | bigint;
};

export function getSwapTokenInstructionDataEncoder(): FixedSizeEncoder<SwapTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountIn', getU64Encoder()],
      ['minimumOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_TOKEN_DISCRIMINATOR })
  );
}

export function getSwapTokenInstructionDataDecoder(): FixedSizeDecoder<SwapTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountIn', getU64Decoder()],
    ['minimumOut', getU64Decoder()],
  ]);
}

export function getSwapTokenInstructionDataCodec(): FixedSizeCodec<
  SwapTokenInstructionDataArgs,
  SwapTokenInstructionData
> {
  return combineCodec(
    getSwapTokenInstructionDataEncoder(),
    getSwapTokenInstructionDataDecoder()
  );
}

export type SwapTokenInput<
  TAccountPool extends string = string,
  TAccountSigner extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountUserAtaA extends string = string,
  TAccountUserAtaB extends string = string,
  TAccountPoolAuth extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  signer: TransactionSigner<TAccountSigner>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  userAtaA: Address<TAccountUserAtaA>;
  userAtaB: Address<TAccountUserAtaB>;
  poolAuth: Address<TAccountPoolAuth>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amountIn: SwapTokenInstructionDataArgs['amountIn'];
  minimumOut: SwapTokenInstructionDataArgs['minimumOut'];
};

export function getSwapTokenInstruction<
  TAccountPool extends string,
  TAccountSigner extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountUserAtaA extends string,
  TAccountUserAtaB extends string,
  TAccountPoolAuth extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SwapTokenInput<
    TAccountPool,
    TAccountSigner,
    TAccountVaultA,
    TAccountVaultB,
    TAccountUserAtaA,
    TAccountUserAtaB,
    TAccountPoolAuth,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapTokenInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountSigner,
  TAccountVaultA,
  TAccountVaultB,
  TAccountUserAtaA,
  TAccountUserAtaB,
  TAccountPoolAuth,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    userAtaA: { value: input.userAtaA ?? null, isWritable: true },
    userAtaB: { value: input.userAtaB ?? null, isWritable: true },
    poolAuth: { value: input.poolAuth ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.userAtaA),
      getAccountMeta(accounts.userAtaB),
      getAccountMeta(accounts.poolAuth),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getSwapTokenInstructionDataEncoder().encode(
      args as SwapTokenInstructionDataArgs
    ),
  } as SwapTokenInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountSigner,
    TAccountVaultA,
    TAccountVaultB,
    TAccountUserAtaA,
    TAccountUserAtaB,
    TAccountPoolAuth,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedSwapTokenInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    signer: TAccountMetas[1];
    vaultA: TAccountMetas[2];
    vaultB: TAccountMetas[3];
    userAtaA: TAccountMetas[4];
    userAtaB: TAccountMetas[5];
    poolAuth: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: SwapTokenInstructionData;
};

export function parseSwapTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwapTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      signer: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      userAtaA: getNextAccount(),
      userAtaB: getNextAccount(),
      poolAuth: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getSwapTokenInstructionDataDecoder().decode(instruction.data),
  };
}
