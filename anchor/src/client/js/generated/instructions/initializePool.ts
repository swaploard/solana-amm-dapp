/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_POOL_DISCRIMINATOR = new Uint8Array([
  95, 180, 10, 172, 84, 174, 232, 40,
]);

export function getInitializePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POOL_DISCRIMINATOR
  );
}

export type InitializePoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountMintA extends string | AccountMeta<string> = string,
  TAccountMintB extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountPoolAuth extends string | AccountMeta<string> = string,
  TAccountVaultA extends string | AccountMeta<string> = string,
  TAccountVaultB extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountPoolAuth extends string
        ? ReadonlyAccount<TAccountPoolAuth>
        : TAccountPoolAuth,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  feeBps: number;
  protoFeeBps: number;
};

export type InitializePoolInstructionDataArgs = {
  feeBps: number;
  protoFeeBps: number;
};

export function getInitializePoolInstructionDataEncoder(): FixedSizeEncoder<InitializePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['feeBps', getU16Encoder()],
      ['protoFeeBps', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_POOL_DISCRIMINATOR })
  );
}

export function getInitializePoolInstructionDataDecoder(): FixedSizeDecoder<InitializePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['feeBps', getU16Decoder()],
    ['protoFeeBps', getU16Decoder()],
  ]);
}

export function getInitializePoolInstructionDataCodec(): FixedSizeCodec<
  InitializePoolInstructionDataArgs,
  InitializePoolInstructionData
> {
  return combineCodec(
    getInitializePoolInstructionDataEncoder(),
    getInitializePoolInstructionDataDecoder()
  );
}

export type InitializePoolAsyncInput<
  TAccountSigner extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPoolAuth extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  pool?: Address<TAccountPool>;
  lpMint?: Address<TAccountLpMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  poolAuth?: Address<TAccountPoolAuth>;
  vaultA?: Address<TAccountVaultA>;
  vaultB?: Address<TAccountVaultB>;
  feeBps: InitializePoolInstructionDataArgs['feeBps'];
  protoFeeBps: InitializePoolInstructionDataArgs['protoFeeBps'];
};

export async function getInitializePoolInstructionAsync<
  TAccountSigner extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountPoolAuth extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: InitializePoolAsyncInput<
    TAccountSigner,
    TAccountMintA,
    TAccountMintB,
    TAccountPool,
    TAccountLpMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountPoolAuth,
    TAccountVaultA,
    TAccountVaultB
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializePoolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMintA,
    TAccountMintB,
    TAccountPool,
    TAccountLpMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountPoolAuth,
    TAccountVaultA,
    TAccountVaultB
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    poolAuth: { value: input.poolAuth ?? null, isWritable: false },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([80, 111, 111, 108])),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
        getU16Encoder().encode(expectSome(args.feeBps)),
      ],
    });
  }
  if (!accounts.lpMint.value) {
    accounts.lpMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([108, 112, 95, 109, 105, 110, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.poolAuth.value) {
    accounts.poolAuth.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 111, 108, 95, 97, 117, 116, 104])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }
  if (!accounts.vaultA.value) {
    accounts.vaultA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 97, 117, 108, 116, 95, 97])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }
  if (!accounts.vaultB.value) {
    accounts.vaultB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 97, 117, 108, 116, 95, 98])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.poolAuth),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
    ],
    programAddress,
    data: getInitializePoolInstructionDataEncoder().encode(
      args as InitializePoolInstructionDataArgs
    ),
  } as InitializePoolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMintA,
    TAccountMintB,
    TAccountPool,
    TAccountLpMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountPoolAuth,
    TAccountVaultA,
    TAccountVaultB
  >;

  return instruction;
}

export type InitializePoolInput<
  TAccountSigner extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPoolAuth extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  pool: Address<TAccountPool>;
  lpMint: Address<TAccountLpMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  poolAuth: Address<TAccountPoolAuth>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  feeBps: InitializePoolInstructionDataArgs['feeBps'];
  protoFeeBps: InitializePoolInstructionDataArgs['protoFeeBps'];
};

export function getInitializePoolInstruction<
  TAccountSigner extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountPoolAuth extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: InitializePoolInput<
    TAccountSigner,
    TAccountMintA,
    TAccountMintB,
    TAccountPool,
    TAccountLpMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountPoolAuth,
    TAccountVaultA,
    TAccountVaultB
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePoolInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountMintA,
  TAccountMintB,
  TAccountPool,
  TAccountLpMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountPoolAuth,
  TAccountVaultA,
  TAccountVaultB
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    poolAuth: { value: input.poolAuth ?? null, isWritable: false },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.poolAuth),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
    ],
    programAddress,
    data: getInitializePoolInstructionDataEncoder().encode(
      args as InitializePoolInstructionDataArgs
    ),
  } as InitializePoolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMintA,
    TAccountMintB,
    TAccountPool,
    TAccountLpMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountPoolAuth,
    TAccountVaultA,
    TAccountVaultB
  >;

  return instruction;
}

export type ParsedInitializePoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    mintA: TAccountMetas[1];
    mintB: TAccountMetas[2];
    pool: TAccountMetas[3];
    lpMint: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    poolAuth: TAccountMetas[7];
    vaultA: TAccountMetas[8];
    vaultB: TAccountMetas[9];
  };
  data: InitializePoolInstructionData;
};

export function parseInitializePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      pool: getNextAccount(),
      lpMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      poolAuth: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
    },
    data: getInitializePoolInstructionDataDecoder().decode(instruction.data),
  };
}
