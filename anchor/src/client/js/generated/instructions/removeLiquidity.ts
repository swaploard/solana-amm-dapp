/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  80, 85, 209, 72, 24, 206, 177, 108,
]);

export function getRemoveLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_LIQUIDITY_DISCRIMINATOR
  );
}

export type RemoveLiquidityInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountVaultA extends string | AccountMeta<string> = string,
  TAccountVaultB extends string | AccountMeta<string> = string,
  TAccountUserAtaA extends string | AccountMeta<string> = string,
  TAccountUserAtaB extends string | AccountMeta<string> = string,
  TAccountUserLpAta extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountPoolAuth extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountUserAtaA extends string
        ? WritableAccount<TAccountUserAtaA>
        : TAccountUserAtaA,
      TAccountUserAtaB extends string
        ? WritableAccount<TAccountUserAtaB>
        : TAccountUserAtaB,
      TAccountUserLpAta extends string
        ? WritableAccount<TAccountUserLpAta>
        : TAccountUserLpAta,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountPoolAuth extends string
        ? ReadonlyAccount<TAccountPoolAuth>
        : TAccountPoolAuth,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  lpAmount: bigint;
};

export type RemoveLiquidityInstructionDataArgs = { lpAmount: number | bigint };

export function getRemoveLiquidityInstructionDataEncoder(): FixedSizeEncoder<RemoveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lpAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getRemoveLiquidityInstructionDataDecoder(): FixedSizeDecoder<RemoveLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lpAmount', getU64Decoder()],
  ]);
}

export function getRemoveLiquidityInstructionDataCodec(): FixedSizeCodec<
  RemoveLiquidityInstructionDataArgs,
  RemoveLiquidityInstructionData
> {
  return combineCodec(
    getRemoveLiquidityInstructionDataEncoder(),
    getRemoveLiquidityInstructionDataDecoder()
  );
}

export type RemoveLiquidityInput<
  TAccountPool extends string = string,
  TAccountPayer extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountUserAtaA extends string = string,
  TAccountUserAtaB extends string = string,
  TAccountUserLpAta extends string = string,
  TAccountLpMint extends string = string,
  TAccountPoolAuth extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  payer: TransactionSigner<TAccountPayer>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  userAtaA: Address<TAccountUserAtaA>;
  userAtaB: Address<TAccountUserAtaB>;
  userLpAta: Address<TAccountUserLpAta>;
  lpMint: Address<TAccountLpMint>;
  poolAuth: Address<TAccountPoolAuth>;
  tokenProgram?: Address<TAccountTokenProgram>;
  lpAmount: RemoveLiquidityInstructionDataArgs['lpAmount'];
};

export function getRemoveLiquidityInstruction<
  TAccountPool extends string,
  TAccountPayer extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountUserAtaA extends string,
  TAccountUserAtaB extends string,
  TAccountUserLpAta extends string,
  TAccountLpMint extends string,
  TAccountPoolAuth extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: RemoveLiquidityInput<
    TAccountPool,
    TAccountPayer,
    TAccountVaultA,
    TAccountVaultB,
    TAccountUserAtaA,
    TAccountUserAtaB,
    TAccountUserLpAta,
    TAccountLpMint,
    TAccountPoolAuth,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveLiquidityInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountPayer,
  TAccountVaultA,
  TAccountVaultB,
  TAccountUserAtaA,
  TAccountUserAtaB,
  TAccountUserLpAta,
  TAccountLpMint,
  TAccountPoolAuth,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    userAtaA: { value: input.userAtaA ?? null, isWritable: true },
    userAtaB: { value: input.userAtaB ?? null, isWritable: true },
    userLpAta: { value: input.userLpAta ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    poolAuth: { value: input.poolAuth ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.userAtaA),
      getAccountMeta(accounts.userAtaB),
      getAccountMeta(accounts.userLpAta),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.poolAuth),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRemoveLiquidityInstructionDataEncoder().encode(
      args as RemoveLiquidityInstructionDataArgs
    ),
  } as RemoveLiquidityInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountPayer,
    TAccountVaultA,
    TAccountVaultB,
    TAccountUserAtaA,
    TAccountUserAtaB,
    TAccountUserLpAta,
    TAccountLpMint,
    TAccountPoolAuth,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRemoveLiquidityInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    payer: TAccountMetas[1];
    vaultA: TAccountMetas[2];
    vaultB: TAccountMetas[3];
    userAtaA: TAccountMetas[4];
    userAtaB: TAccountMetas[5];
    userLpAta: TAccountMetas[6];
    lpMint: TAccountMetas[7];
    poolAuth: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
  };
  data: RemoveLiquidityInstructionData;
};

export function parseRemoveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRemoveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      payer: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      userAtaA: getNextAccount(),
      userAtaB: getNextAccount(),
      userLpAta: getNextAccount(),
      lpMint: getNextAccount(),
      poolAuth: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRemoveLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
