/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  181, 157, 89, 67, 143, 182, 52, 72,
]);

export function getAddLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY_DISCRIMINATOR
  );
}

export type AddLiquidityInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountVaultA extends string | AccountMeta<string> = string,
  TAccountVaultB extends string | AccountMeta<string> = string,
  TAccountUserAtaA extends string | AccountMeta<string> = string,
  TAccountUserAtaB extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountUserLpAta extends string | AccountMeta<string> = string,
  TAccountPoolAuth extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountUserAtaA extends string
        ? WritableAccount<TAccountUserAtaA>
        : TAccountUserAtaA,
      TAccountUserAtaB extends string
        ? WritableAccount<TAccountUserAtaB>
        : TAccountUserAtaB,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountUserLpAta extends string
        ? WritableAccount<TAccountUserLpAta>
        : TAccountUserLpAta,
      TAccountPoolAuth extends string
        ? ReadonlyAccount<TAccountPoolAuth>
        : TAccountPoolAuth,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountA: bigint;
  amountB: bigint;
};

export type AddLiquidityInstructionDataArgs = {
  amountA: number | bigint;
  amountB: number | bigint;
};

export function getAddLiquidityInstructionDataEncoder(): FixedSizeEncoder<AddLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountA', getU64Encoder()],
      ['amountB', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getAddLiquidityInstructionDataDecoder(): FixedSizeDecoder<AddLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountA', getU64Decoder()],
    ['amountB', getU64Decoder()],
  ]);
}

export function getAddLiquidityInstructionDataCodec(): FixedSizeCodec<
  AddLiquidityInstructionDataArgs,
  AddLiquidityInstructionData
> {
  return combineCodec(
    getAddLiquidityInstructionDataEncoder(),
    getAddLiquidityInstructionDataDecoder()
  );
}

export type AddLiquidityInput<
  TAccountSigner extends string = string,
  TAccountPool extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountUserAtaA extends string = string,
  TAccountUserAtaB extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserLpAta extends string = string,
  TAccountPoolAuth extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  pool: Address<TAccountPool>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  userAtaA: Address<TAccountUserAtaA>;
  userAtaB: Address<TAccountUserAtaB>;
  lpMint: Address<TAccountLpMint>;
  userLpAta: Address<TAccountUserLpAta>;
  poolAuth: Address<TAccountPoolAuth>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amountA: AddLiquidityInstructionDataArgs['amountA'];
  amountB: AddLiquidityInstructionDataArgs['amountB'];
};

export function getAddLiquidityInstruction<
  TAccountSigner extends string,
  TAccountPool extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountUserAtaA extends string,
  TAccountUserAtaB extends string,
  TAccountLpMint extends string,
  TAccountUserLpAta extends string,
  TAccountPoolAuth extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: AddLiquidityInput<
    TAccountSigner,
    TAccountPool,
    TAccountVaultA,
    TAccountVaultB,
    TAccountUserAtaA,
    TAccountUserAtaB,
    TAccountLpMint,
    TAccountUserLpAta,
    TAccountPoolAuth,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidityInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountPool,
  TAccountVaultA,
  TAccountVaultB,
  TAccountUserAtaA,
  TAccountUserAtaB,
  TAccountLpMint,
  TAccountUserLpAta,
  TAccountPoolAuth,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    userAtaA: { value: input.userAtaA ?? null, isWritable: true },
    userAtaB: { value: input.userAtaB ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userLpAta: { value: input.userLpAta ?? null, isWritable: true },
    poolAuth: { value: input.poolAuth ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.userAtaA),
      getAccountMeta(accounts.userAtaB),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userLpAta),
      getAccountMeta(accounts.poolAuth),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getAddLiquidityInstructionDataEncoder().encode(
      args as AddLiquidityInstructionDataArgs
    ),
  } as AddLiquidityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPool,
    TAccountVaultA,
    TAccountVaultB,
    TAccountUserAtaA,
    TAccountUserAtaB,
    TAccountLpMint,
    TAccountUserLpAta,
    TAccountPoolAuth,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedAddLiquidityInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    pool: TAccountMetas[1];
    vaultA: TAccountMetas[2];
    vaultB: TAccountMetas[3];
    userAtaA: TAccountMetas[4];
    userAtaB: TAccountMetas[5];
    lpMint: TAccountMetas[6];
    userLpAta: TAccountMetas[7];
    poolAuth: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
  };
  data: AddLiquidityInstructionData;
};

export function parseAddLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      pool: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      userAtaA: getNextAccount(),
      userAtaB: getNextAccount(),
      lpMint: getNextAccount(),
      userLpAta: getNextAccount(),
      poolAuth: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getAddLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
